//! # DBus interface proxy for: `com.subgraph.installer.Manager`
//!
//! This code was generated by `zbus-xmlgen` `2.0.1` from DBus introspection data.
//! Source: `Interface '/com/subgraph/installer' from service 'com.subgraph.installer' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

#[dbus_proxy(
    default_service = "com.subgraph.installer",
    interface = "com.subgraph.installer.Manager",
    default_path = "/com/subgraph/installer"
)]
trait Manager {
    /// GetDisks method
    //fn get_disks(&self, name: std::collections::HashMap<&str, &[&str]>) -> zbus::Result<()>;
    fn get_disks(&self) -> zbus::Result<std::collections::HashMap<String, Vec<String>>>;

    /// RunInstall method
    fn run_install(
        &self,
        device: &str,
        citadel_passphrase: &str,
        luks_passphrase: &str,
    ) -> zbus::Result<bool>;

    // /// CitadelPasswordSet signal
    // #[dbus_proxy(signal)]
    // fn citadel_password_set(&self) -> zbus::Result<()>;

    /// RunInstallStarted signal
    #[dbus_proxy(signal)]
    fn install_started(&self, progress_message: &str) -> zbus::Result<()>;

    #[dbus_proxy(signal)]
    fn partition_disk(&self, progress_message: &str) -> zbus::Result<()>;

    #[dbus_proxy(signal)]
    fn luks_setup(&self, progress_message: &str) -> zbus::Result<()>;

    #[dbus_proxy(signal)]
    fn lvm_setup(&self, progress_message: &str) -> zbus::Result<()>;

    #[dbus_proxy(signal)]
    fn boot_setup(&self, progress_message: &str) -> zbus::Result<()>;

    #[dbus_proxy(signal)]
    fn storage_created(&self, progress_message: &str) -> zbus::Result<()>;

    #[dbus_proxy(signal)]
    fn rootfs_installed(&self, progress_message: &str) -> zbus::Result<()>;

    /// InstallCompleted signal
    #[dbus_proxy(signal)]
    fn install_completed(&self) -> zbus::Result<()>;

    #[dbus_proxy(signal)]
    fn install_failed(&self, progress_message: &str) -> zbus::Result<()>;
}
